import { Component } from "react";
import PropTypes from "prop-types";
import { WaveSurferParams } from "wavesurfer.js";
/**
 * Throws an error if the prop is defined and not an integer or not positive
 */
declare function positiveIntegerProptype(props: Props, propName: keyof Props, componentName: string): Error | null;
declare type Peaks = number[];
export interface Props extends Omit<WaveSurferParams, "container"> {
    src: string | File | Blob;
    playing?: boolean;
    pos?: number;
    mediaElt?: string | HTMLElement;
    audioPeaks?: Peaks;
    volume?: number;
    zoom?: number;
    responsive?: boolean;
    onPositionChange?: Function;
    onAudioprocess?: Function;
    onError?: Function;
    onFinish?: Function;
    onLoading?: Function;
    onMouseup?: Function;
    onPause?: Function;
    onPlay?: Function;
    onReady?: Function;
    onScroll?: Function;
    onSeek?: Function;
    onZoom?: Function;
}
declare type State = {
    isReady: boolean;
    pos: number;
    formattedPos: number;
};
export default class WavesurferComponent extends Component<Props, State> {
    private wavesurfer?;
    private wavesurferElm?;
    private handleResize?;
    state: State;
    static defaultProps: {
        playing: boolean;
        pos: number;
        responsive: boolean;
        autoCenter: boolean;
        onPositionChange: () => void;
    };
    static propTypes: {
        playing: PropTypes.Requireable<boolean>;
        pos: PropTypes.Requireable<number>;
        src: (props: Props, propName: keyof Props, componentName: string) => Error | null;
        mediaElt: PropTypes.Requireable<string | HTMLElement>;
        audioPeaks: PropTypes.Requireable<any[]>;
        volume: PropTypes.Requireable<number>;
        zoom: PropTypes.Requireable<number>;
        responsive: PropTypes.Requireable<boolean>;
        onPositionChange: PropTypes.Requireable<(...args: any[]) => any>;
        children: PropTypes.Requireable<any[] | PropTypes.ReactElementLike>;
        audioRate: PropTypes.Requireable<number>;
        backend: PropTypes.Requireable<string>;
        barWidth: (props: Props, propName: keyof Props, componentName: string) => Error | null;
        cursorColor: PropTypes.Requireable<string>;
        cursorWidth: typeof positiveIntegerProptype;
        dragSelection: PropTypes.Requireable<boolean>;
        fillParent: PropTypes.Requireable<boolean>;
        height: typeof positiveIntegerProptype;
        hideScrollbar: PropTypes.Requireable<boolean>;
        interact: PropTypes.Requireable<boolean>;
        loopSelection: PropTypes.Requireable<boolean>;
        mediaControls: PropTypes.Requireable<boolean>;
        minPxPerSec: typeof positiveIntegerProptype;
        normalize: PropTypes.Requireable<boolean>;
        pixelRatio: PropTypes.Requireable<number>;
        progressColor: PropTypes.Requireable<string>;
        scrollParent: PropTypes.Requireable<boolean>;
        skipLength: PropTypes.Requireable<number>;
        waveColor: PropTypes.Requireable<string | CanvasGradient>;
        autoCenter: PropTypes.Requireable<boolean>;
    };
    constructor(props: Props);
    componentDidMount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: Props): void;
    componentWillUnmount(): void;
    private secToPos;
    private posToSec;
    private seekTo;
    private loadMediaElt;
    private loadAudio;
    render(): JSX.Element;
}
export {};
