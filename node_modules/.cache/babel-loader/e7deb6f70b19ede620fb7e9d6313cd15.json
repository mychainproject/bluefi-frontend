{"ast":null,"code":"/**\n * A client library for the https://nft.storage/ service. It provides a convenient\n * interface for working with the [Raw HTTP API](https://nft.storage/#api-docs)\n * from a web browser or [Node.js](https://nodejs.org/) and comes bundled with\n * TS for out-of-the box type inference and better IntelliSense.\n *\n * @example\n * ```js\n * import { NFTStorage, File, Blob } from \"nft.storage\"\n * const client = new NFTStorage({ token: API_TOKEN })\n *\n * const cid = await client.storeBlob(new Blob(['hello world']))\n * ```\n * @module\n */\nimport { transform } from 'streaming-iterables';\nimport pRetry from 'p-retry';\nimport { TreewalkCarSplitter } from 'carbites/treewalk';\nimport * as API from './lib/interface.js';\nimport * as Token from './token.js';\nimport { fetch, File, Blob, FormData } from './platform.js';\nimport { toGatewayURL } from './gateway.js';\nconst MAX_STORE_RETRIES = 5;\nconst MAX_CONCURRENT_UPLOADS = 3;\nconst MAX_CHUNK_SIZE = 1024 * 1024 * 10; // chunk to ~10MB CARs\n\n/** @typedef {import('multiformats/block').BlockDecoder<any, any>} AnyBlockDecoder */\n\n/**\n * @implements API.Service\n */\n\nclass NFTStorage {\n  /**\n   * Constructs a client bound to the given `options.token` and\n   * `options.endpoint`.\n   *\n   * @example\n   * ```js\n   * import { NFTStorage, File, Blob } from \"nft.storage\"\n   * const client = new NFTStorage({ token: API_TOKEN })\n   *\n   * const cid = await client.storeBlob(new Blob(['hello world']))\n   * ```\n   * Optionally you could pass an alternative API endpoint (e.g. for testing)\n   * @example\n   * ```js\n   * import { NFTStorage } from \"nft.storage\"\n   * const client = new NFTStorage({\n   *   token: API_TOKEN\n   *   endpoint: new URL('http://localhost:8080/')\n   * })\n   * ```\n   *\n   * @param {{token: string, endpoint?:URL}} options\n   */\n  constructor(_ref) {\n    let {\n      token,\n      endpoint = new URL('https://api.nft.storage')\n    } = _ref;\n\n    /**\n     * Authorization token.\n     *\n     * @readonly\n     */\n    this.token = token;\n    /**\n     * Service API endpoint `URL`.\n     * @readonly\n     */\n\n    this.endpoint = endpoint;\n  }\n  /**\n   * @hidden\n   * @param {string} token\n   */\n\n\n  static auth(token) {\n    if (!token) throw new Error('missing token');\n    return {\n      Authorization: `Bearer ${token}`\n    };\n  }\n  /**\n   * @param {API.Service} service\n   * @param {Blob} blob\n   * @returns {Promise<API.CIDString>}\n   */\n\n\n  static async storeBlob(_ref2, blob) {\n    let {\n      endpoint,\n      token\n    } = _ref2;\n    const url = new URL(`upload/`, endpoint);\n\n    if (blob.size === 0) {\n      throw new Error('Content size is 0, make sure to provide some content');\n    }\n\n    const request = await fetch(url.toString(), {\n      method: 'POST',\n      headers: NFTStorage.auth(token),\n      body: blob\n    });\n    const result = await request.json();\n\n    if (result.ok) {\n      return result.value.cid;\n    } else {\n      throw new Error(result.error.message);\n    }\n  }\n  /**\n   * @param {API.Service} service\n   * @param {Blob|API.CarReader} car\n   * @param {{\n   *   onStoredChunk?: (size: number) => void\n   *   decoders?: AnyBlockDecoder[]\n   * }} [options]\n   * @returns {Promise<API.CIDString>}\n   */\n\n\n  static async storeCar(_ref3, car) {\n    let {\n      endpoint,\n      token\n    } = _ref3;\n    let {\n      onStoredChunk,\n      decoders\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const targetSize = MAX_CHUNK_SIZE;\n    const splitter = car instanceof Blob ? await TreewalkCarSplitter.fromBlob(car, targetSize, {\n      decoders\n    }) : new TreewalkCarSplitter(car, targetSize, {\n      decoders\n    });\n    const upload = transform(MAX_CONCURRENT_UPLOADS, async function (\n    /** @type {AsyncIterable<Uint8Array>} */\n    car) {\n      const carParts = [];\n\n      for await (const part of car) {\n        carParts.push(part);\n      }\n\n      const carFile = new Blob(carParts, {\n        type: 'application/car'\n      });\n      const res = await pRetry(() => NFTStorage.storeBlob({\n        endpoint,\n        token\n      }, carFile), {\n        retries: MAX_STORE_RETRIES\n      });\n      onStoredChunk && onStoredChunk(carFile.size);\n      return res;\n    });\n    let root;\n\n    for await (const cid of upload(splitter.cars())) {\n      root = cid;\n    }\n\n    return (\n      /** @type {API.CIDString} */\n      root\n    );\n  }\n  /**\n   * @param {API.Service} service\n   * @param {Iterable<File>} files\n   * @returns {Promise<API.CIDString>}\n   */\n\n\n  static async storeDirectory(_ref4, files) {\n    let {\n      endpoint,\n      token\n    } = _ref4;\n    const url = new URL(`upload/`, endpoint);\n    const body = new FormData();\n    let size = 0;\n\n    for (const file of files) {\n      body.append('file', file, file.name);\n      size += file.size;\n    }\n\n    if (size === 0) {\n      throw new Error('Total size of files should exceed 0, make sure to provide some content');\n    }\n\n    const response = await fetch(url.toString(), {\n      method: 'POST',\n      headers: NFTStorage.auth(token),\n      body\n    });\n    const result = await response.json();\n\n    if (result.ok) {\n      return result.value.cid;\n    } else {\n      throw new Error(result.error.message);\n    }\n  }\n  /**\n   * @template {API.TokenInput} T\n   * @param {API.Service} service\n   * @param {T} metadata\n   * @returns {Promise<API.Token<T>>}\n   */\n\n\n  static async store(_ref5, metadata) {\n    let {\n      endpoint,\n      token\n    } = _ref5;\n    validateERC1155(metadata);\n    const url = new URL(`store/`, endpoint);\n    const body = Token.encode(metadata);\n    const paths = new Set(body.keys());\n    const response = await fetch(url.toString(), {\n      method: 'POST',\n      headers: NFTStorage.auth(token),\n      body\n    });\n    /** @type {API.StoreResponse<T>} */\n\n    const result = await response.json();\n\n    if (result.ok === true) {\n      const {\n        value\n      } = result;\n      return Token.decode(value, paths);\n    } else {\n      throw new Error(result.error.message);\n    }\n  }\n  /**\n   * @param {API.Service} service\n   * @param {string} cid\n   * @returns {Promise<API.StatusResult>}\n   */\n\n\n  static async status(_ref6, cid) {\n    let {\n      endpoint,\n      token\n    } = _ref6;\n    const url = new URL(`${cid}/`, endpoint);\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: NFTStorage.auth(token)\n    });\n    const result = await response.json();\n\n    if (result.ok) {\n      return {\n        cid: result.value.cid,\n        deals: decodeDeals(result.value.deals),\n        size: result.value.size,\n        pin: decodePin(result.value.pin),\n        created: new Date(result.value.created)\n      };\n    } else {\n      throw new Error(result.error.message);\n    }\n  }\n  /**\n   * @param {API.PublicService} service\n   * @param {string} cid\n   * @returns {Promise<API.CheckResult>}\n   */\n\n\n  static async check(_ref7, cid) {\n    let {\n      endpoint\n    } = _ref7;\n    const url = new URL(`check/${cid}/`, endpoint);\n    const response = await fetch(url.toString());\n    const result = await response.json();\n\n    if (result.ok) {\n      return {\n        cid: result.value.cid,\n        deals: decodeDeals(result.value.deals),\n        pin: result.value.pin\n      };\n    } else {\n      throw new Error(result.error.message);\n    }\n  }\n  /**\n   * @param {API.Service} service\n   * @param {string} cid\n   * @returns {Promise<void>}\n   */\n\n\n  static async delete(_ref8, cid) {\n    let {\n      endpoint,\n      token\n    } = _ref8;\n    const url = new URL(`${cid}/`, endpoint);\n    const response = await fetch(url.toString(), {\n      method: 'DELETE',\n      headers: NFTStorage.auth(token)\n    });\n    const result = await response.json();\n\n    if (!result.ok) {\n      throw new Error(result.error.message);\n    }\n  } // Just a sugar so you don't have to pass around endpoint and token around.\n\n  /**\n   * Stores a single file and returns the corresponding Content Identifier (CID).\n   * Takes a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)\n   * or a [File](https://developer.mozilla.org/en-US/docs/Web/API/File). Note\n   * that no file name or file metadata is retained.\n   *\n   * @example\n   * ```js\n   * const content = new Blob(['hello world'])\n   * const cid = await client.storeBlob(content)\n   * cid //> 'zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9'\n   * ```\n   *\n   * @param {Blob} blob\n   */\n\n\n  storeBlob(blob) {\n    return NFTStorage.storeBlob(this, blob);\n  }\n  /**\n   * Stores files encoded as a single [Content Addressed Archive\n   * (CAR)](https://github.com/ipld/specs/blob/master/block-layer/content-addressable-archives.md).\n   *\n   * Takes a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)\n   * or a [File](https://developer.mozilla.org/en-US/docs/Web/API/File).\n   *\n   * Returns the corresponding Content Identifier (CID).\n   *\n   * See the [`ipfs-car` docs](https://www.npmjs.com/package/ipfs-car) for more\n   * details on packing a CAR file.\n   *\n   * @example\n   * ```js\n   * import { pack } from 'ipfs-car/pack'\n   * import { CarReader } from '@ipld/car'\n   * const { out, root } = await pack({\n   *  input: fs.createReadStream('pinpie.pdf')\n   * })\n   * const expectedCid = root.toString()\n   * const carReader = await CarReader.fromIterable(out)\n   * const cid = await storage.storeCar(carReader)\n   * console.assert(cid === expectedCid)\n   * ```\n   *\n   * @example\n   * ```\n   * import { packToBlob } from 'ipfs-car/pack/blob'\n   * const data = 'Hello world'\n   * const { root, car } = await packToBlob({ input: [new TextEncoder().encode(data)] })\n   * const expectedCid = root.toString()\n   * const cid = await client.storeCar(car)\n   * console.assert(cid === expectedCid)\n   * ```\n   * @param {Blob|API.CarReader} car\n   * @param {object} [options]\n   * @param {(size: number) => void} [options.onStoredChunk] Callback called\n   * after each chunk of data has been uploaded. By default, data is split into\n   * chunks of around 10MB. It is passed the actual chunk size in bytes.\n   * @param {AnyBlockDecoder[]} [options.decoders] Additional IPLD block\n   * decoders. Used to interpret the data in the CAR file and split it into\n   * multiple chunks. Note these are only required if the CAR file was not\n   * encoded using the default encoders: `dag-pb`, `dag-cbor` and `raw`.\n   */\n\n\n  storeCar(car, options) {\n    return NFTStorage.storeCar(this, car, options);\n  }\n  /**\n   * Stores a directory of files and returns a CID for the directory.\n   *\n   * @example\n   * ```js\n   * const cid = await client.storeDirectory([\n   *   new File(['hello world'], 'hello.txt'),\n   *   new File([JSON.stringify({'from': 'incognito'}, null, 2)], 'metadata.json')\n   * ])\n   * cid //>\n   * ```\n   *\n   * Argument can be a [FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList)\n   * instance as well, in which case directory structure will be retained.\n   *\n   * @param {Iterable<File>} files\n   */\n\n\n  storeDirectory(files) {\n    return NFTStorage.storeDirectory(this, files);\n  }\n  /**\n   * Returns current status of the stored NFT by its CID. Note the NFT must\n   * have previously been stored by this account.\n   *\n   * @example\n   * ```js\n   * const status = await client.status('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')\n   * ```\n   *\n   * @param {string} cid\n   */\n\n\n  status(cid) {\n    return NFTStorage.status(this, cid);\n  }\n  /**\n   * Removes stored content by its CID from the service.\n   *\n   * > Please note that even if content is removed from the service other nodes\n   * that have replicated it might still continue providing it.\n   *\n   * @example\n   * ```js\n   * await client.delete('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')\n   * ```\n   *\n   * @param {string} cid\n   */\n\n\n  delete(cid) {\n    return NFTStorage.delete(this, cid);\n  }\n  /**\n   * Check if a CID of an NFT is being stored by nft.storage. Throws if the NFT\n   * was not found.\n   *\n   * @example\n   * ```js\n   * const status = await client.check('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')\n   * ```\n   *\n   * @param {string} cid\n   */\n\n\n  check(cid) {\n    return NFTStorage.check(this, cid);\n  }\n  /**\n   * Stores the given token and all resources it references (in the form of a\n   * File or a Blob) along with a metadata JSON as specificed in\n   * [ERC-1155](https://eips.ethereum.org/EIPS/eip-1155#metadata). The\n   * `token.image` must be either a `File` or a `Blob` instance, which will be\n   * stored and the corresponding content address URL will be saved in the\n   * metadata JSON file under `image` field.\n   *\n   * If `token.properties` contains properties with `File` or `Blob` values,\n   * those also get stored and their URLs will be saved in the metadata JSON\n   * file in their place.\n   *\n   * Note: URLs for `File` objects will retain file names e.g. in case of\n   * `new File([bytes], 'cat.png', { type: 'image/png' })` will be transformed\n   * into a URL that looks like `ipfs://bafy...hash/image/cat.png`. For `Blob`\n   * objects, the URL will not have a file name name or mime type, instead it\n   * will be transformed into a URL that looks like\n   * `ipfs://bafy...hash/image/blob`.\n   *\n   * @example\n   * ```js\n   * const metadata = await client.store({\n   *   name: 'nft.storage store test',\n   *   description: 'Test ERC-1155 compatible metadata.',\n   *   image: new File(['<DATA>'], 'pinpie.jpg', { type: 'image/jpg' }),\n   *   properties: {\n   *     custom: 'Custom data can appear here, files are auto uploaded.',\n   *     file: new File(['<DATA>'], 'README.md', { type: 'text/plain' }),\n   *   }\n   * })\n   *\n   * console.log('IPFS URL for the metadata:', metadata.url)\n   * console.log('metadata.json contents:\\n', metadata.data)\n   * console.log('metadata.json with IPFS gateway URLs:\\n', metadata.embed())\n   * ```\n   *\n   * @template {API.TokenInput} T\n   * @param {T} token\n   * @returns {Promise<API.Token<T>>}\n   */\n\n\n  store(token) {\n    return NFTStorage.store(this, token);\n  }\n\n}\n/**\n * @param {API.TokenInput} metadata\n */\n\n\nconst validateERC1155 = _ref9 => {\n  let {\n    name,\n    description,\n    image,\n    decimals\n  } = _ref9;\n\n  // Just validate that expected fields are present\n  if (typeof name !== 'string') {\n    throw new TypeError('string property `name` identifying the asset is required');\n  }\n\n  if (typeof description !== 'string') {\n    throw new TypeError('string property `description` describing asset is required');\n  }\n\n  if (!(image instanceof Blob)) {\n    throw new TypeError('property `image` must be a Blob or File object');\n  } else if (!image.type.startsWith('image/')) {\n    console.warn(`According to ERC721 Metadata JSON Schema 'image' must have 'image/*' mime type.\n\nFor better interoperability we would highly recommend storing content with different mime type under 'properties' namespace e.g. \\`properties: { video: file }\\` and using 'image' field for storing a preview image for it instead.\n\nFor more context please see ERC-721 specification https://eips.ethereum.org/EIPS/eip-721`);\n  }\n\n  if (typeof decimals !== 'undefined' && typeof decimals !== 'number') {\n    throw new TypeError('property `decimals` must be an integer value');\n  }\n};\n/**\n * @param {API.Deal[]} deals\n * @returns {API.Deal[]}\n */\n\n\nconst decodeDeals = deals => deals.map(deal => {\n  const {\n    dealActivation,\n    dealExpiration,\n    lastChanged\n  } = {\n    dealExpiration: null,\n    dealActivation: null,\n    ...deal\n  };\n  return { ...deal,\n    lastChanged: new Date(lastChanged),\n    ...(dealActivation && {\n      dealActivation: new Date(dealActivation)\n    }),\n    ...(dealExpiration && {\n      dealExpiration: new Date(dealExpiration)\n    })\n  };\n});\n/**\n * @param {API.Pin} pin\n * @returns {API.Pin}\n */\n\n\nconst decodePin = pin => ({ ...pin,\n  created: new Date(pin.created)\n});\n\nconst TokenModel = Token.Token;\nexport { TokenModel as Token };\nexport { NFTStorage, File, Blob, FormData, toGatewayURL };\n/**\n * Just to verify API compatibility.\n * @type {API.API}\n */\n\nconst api = NFTStorage;\nvoid api;","map":{"version":3,"sources":["/home/hp/Desktop/Bluefi/bleufi-frontend/node_modules/nft.storage/src/lib.js"],"names":["transform","pRetry","TreewalkCarSplitter","API","Token","fetch","File","Blob","FormData","toGatewayURL","MAX_STORE_RETRIES","MAX_CONCURRENT_UPLOADS","MAX_CHUNK_SIZE","NFTStorage","constructor","token","endpoint","URL","auth","Error","Authorization","storeBlob","blob","url","size","request","toString","method","headers","body","result","json","ok","value","cid","error","message","storeCar","car","onStoredChunk","decoders","targetSize","splitter","fromBlob","upload","carParts","part","push","carFile","type","res","retries","root","cars","storeDirectory","files","file","append","name","response","store","metadata","validateERC1155","encode","paths","Set","keys","decode","status","deals","decodeDeals","pin","decodePin","created","Date","check","delete","options","description","image","decimals","TypeError","startsWith","console","warn","map","deal","dealActivation","dealExpiration","lastChanged","TokenModel","api"],"mappings":"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","sourcesContent":["/**\n * A client library for the https://nft.storage/ service. It provides a convenient\n * interface for working with the [Raw HTTP API](https://nft.storage/#api-docs)\n * from a web browser or [Node.js](https://nodejs.org/) and comes bundled with\n * TS for out-of-the box type inference and better IntelliSense.\n *\n * @example\n * ```js\n * import { NFTStorage, File, Blob } from \"nft.storage\"\n * const client = new NFTStorage({ token: API_TOKEN })\n *\n * const cid = await client.storeBlob(new Blob(['hello world']))\n * ```\n * @module\n */\n\nimport { transform } from 'streaming-iterables'\nimport pRetry from 'p-retry'\nimport { TreewalkCarSplitter } from 'carbites/treewalk'\nimport * as API from './lib/interface.js'\nimport * as Token from './token.js'\nimport { fetch, File, Blob, FormData } from './platform.js'\nimport { toGatewayURL } from './gateway.js'\n\nconst MAX_STORE_RETRIES = 5\nconst MAX_CONCURRENT_UPLOADS = 3\nconst MAX_CHUNK_SIZE = 1024 * 1024 * 10 // chunk to ~10MB CARs\n\n/** @typedef {import('multiformats/block').BlockDecoder<any, any>} AnyBlockDecoder */\n\n/**\n * @implements API.Service\n */\nclass NFTStorage {\n  /**\n   * Constructs a client bound to the given `options.token` and\n   * `options.endpoint`.\n   *\n   * @example\n   * ```js\n   * import { NFTStorage, File, Blob } from \"nft.storage\"\n   * const client = new NFTStorage({ token: API_TOKEN })\n   *\n   * const cid = await client.storeBlob(new Blob(['hello world']))\n   * ```\n   * Optionally you could pass an alternative API endpoint (e.g. for testing)\n   * @example\n   * ```js\n   * import { NFTStorage } from \"nft.storage\"\n   * const client = new NFTStorage({\n   *   token: API_TOKEN\n   *   endpoint: new URL('http://localhost:8080/')\n   * })\n   * ```\n   *\n   * @param {{token: string, endpoint?:URL}} options\n   */\n  constructor({ token, endpoint = new URL('https://api.nft.storage') }) {\n    /**\n     * Authorization token.\n     *\n     * @readonly\n     */\n    this.token = token\n    /**\n     * Service API endpoint `URL`.\n     * @readonly\n     */\n    this.endpoint = endpoint\n  }\n\n  /**\n   * @hidden\n   * @param {string} token\n   */\n  static auth(token) {\n    if (!token) throw new Error('missing token')\n    return { Authorization: `Bearer ${token}` }\n  }\n  /**\n   * @param {API.Service} service\n   * @param {Blob} blob\n   * @returns {Promise<API.CIDString>}\n   */\n  static async storeBlob({ endpoint, token }, blob) {\n    const url = new URL(`upload/`, endpoint)\n\n    if (blob.size === 0) {\n      throw new Error('Content size is 0, make sure to provide some content')\n    }\n\n    const request = await fetch(url.toString(), {\n      method: 'POST',\n      headers: NFTStorage.auth(token),\n      body: blob,\n    })\n    const result = await request.json()\n\n    if (result.ok) {\n      return result.value.cid\n    } else {\n      throw new Error(result.error.message)\n    }\n  }\n  /**\n   * @param {API.Service} service\n   * @param {Blob|API.CarReader} car\n   * @param {{\n   *   onStoredChunk?: (size: number) => void\n   *   decoders?: AnyBlockDecoder[]\n   * }} [options]\n   * @returns {Promise<API.CIDString>}\n   */\n  static async storeCar(\n    { endpoint, token },\n    car,\n    { onStoredChunk, decoders } = {}\n  ) {\n    const targetSize = MAX_CHUNK_SIZE\n    const splitter =\n      car instanceof Blob\n        ? await TreewalkCarSplitter.fromBlob(car, targetSize, { decoders })\n        : new TreewalkCarSplitter(car, targetSize, { decoders })\n\n    const upload = transform(\n      MAX_CONCURRENT_UPLOADS,\n      async function (/** @type {AsyncIterable<Uint8Array>} */ car) {\n        const carParts = []\n        for await (const part of car) {\n          carParts.push(part)\n        }\n        const carFile = new Blob(carParts, {\n          type: 'application/car',\n        })\n        const res = await pRetry(\n          () => NFTStorage.storeBlob({ endpoint, token }, carFile),\n          { retries: MAX_STORE_RETRIES }\n        )\n        onStoredChunk && onStoredChunk(carFile.size)\n        return res\n      }\n    )\n\n    let root\n    for await (const cid of upload(splitter.cars())) {\n      root = cid\n    }\n\n    return /** @type {API.CIDString} */ (root)\n  }\n  /**\n   * @param {API.Service} service\n   * @param {Iterable<File>} files\n   * @returns {Promise<API.CIDString>}\n   */\n  static async storeDirectory({ endpoint, token }, files) {\n    const url = new URL(`upload/`, endpoint)\n    const body = new FormData()\n    let size = 0\n    for (const file of files) {\n      body.append('file', file, file.name)\n      size += file.size\n    }\n\n    if (size === 0) {\n      throw new Error(\n        'Total size of files should exceed 0, make sure to provide some content'\n      )\n    }\n\n    const response = await fetch(url.toString(), {\n      method: 'POST',\n      headers: NFTStorage.auth(token),\n      body,\n    })\n    const result = await response.json()\n\n    if (result.ok) {\n      return result.value.cid\n    } else {\n      throw new Error(result.error.message)\n    }\n  }\n\n  /**\n   * @template {API.TokenInput} T\n   * @param {API.Service} service\n   * @param {T} metadata\n   * @returns {Promise<API.Token<T>>}\n   */\n  static async store({ endpoint, token }, metadata) {\n    validateERC1155(metadata)\n\n    const url = new URL(`store/`, endpoint)\n    const body = Token.encode(metadata)\n    const paths = new Set(body.keys())\n\n    const response = await fetch(url.toString(), {\n      method: 'POST',\n      headers: NFTStorage.auth(token),\n      body,\n    })\n\n    /** @type {API.StoreResponse<T>} */\n    const result = await response.json()\n\n    if (result.ok === true) {\n      const { value } = result\n      return Token.decode(value, paths)\n    } else {\n      throw new Error(result.error.message)\n    }\n  }\n  /**\n   * @param {API.Service} service\n   * @param {string} cid\n   * @returns {Promise<API.StatusResult>}\n   */\n  static async status({ endpoint, token }, cid) {\n    const url = new URL(`${cid}/`, endpoint)\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: NFTStorage.auth(token),\n    })\n    const result = await response.json()\n\n    if (result.ok) {\n      return {\n        cid: result.value.cid,\n        deals: decodeDeals(result.value.deals),\n        size: result.value.size,\n        pin: decodePin(result.value.pin),\n        created: new Date(result.value.created),\n      }\n    } else {\n      throw new Error(result.error.message)\n    }\n  }\n\n  /**\n   * @param {API.PublicService} service\n   * @param {string} cid\n   * @returns {Promise<API.CheckResult>}\n   */\n  static async check({ endpoint }, cid) {\n    const url = new URL(`check/${cid}/`, endpoint)\n    const response = await fetch(url.toString())\n    const result = await response.json()\n\n    if (result.ok) {\n      return {\n        cid: result.value.cid,\n        deals: decodeDeals(result.value.deals),\n        pin: result.value.pin,\n      }\n    } else {\n      throw new Error(result.error.message)\n    }\n  }\n\n  /**\n   * @param {API.Service} service\n   * @param {string} cid\n   * @returns {Promise<void>}\n   */\n  static async delete({ endpoint, token }, cid) {\n    const url = new URL(`${cid}/`, endpoint)\n    const response = await fetch(url.toString(), {\n      method: 'DELETE',\n      headers: NFTStorage.auth(token),\n    })\n    const result = await response.json()\n    if (!result.ok) {\n      throw new Error(result.error.message)\n    }\n  }\n\n  // Just a sugar so you don't have to pass around endpoint and token around.\n\n  /**\n   * Stores a single file and returns the corresponding Content Identifier (CID).\n   * Takes a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)\n   * or a [File](https://developer.mozilla.org/en-US/docs/Web/API/File). Note\n   * that no file name or file metadata is retained.\n   *\n   * @example\n   * ```js\n   * const content = new Blob(['hello world'])\n   * const cid = await client.storeBlob(content)\n   * cid //> 'zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9'\n   * ```\n   *\n   * @param {Blob} blob\n   */\n  storeBlob(blob) {\n    return NFTStorage.storeBlob(this, blob)\n  }\n  /**\n   * Stores files encoded as a single [Content Addressed Archive\n   * (CAR)](https://github.com/ipld/specs/blob/master/block-layer/content-addressable-archives.md).\n   *\n   * Takes a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)\n   * or a [File](https://developer.mozilla.org/en-US/docs/Web/API/File).\n   *\n   * Returns the corresponding Content Identifier (CID).\n   *\n   * See the [`ipfs-car` docs](https://www.npmjs.com/package/ipfs-car) for more\n   * details on packing a CAR file.\n   *\n   * @example\n   * ```js\n   * import { pack } from 'ipfs-car/pack'\n   * import { CarReader } from '@ipld/car'\n   * const { out, root } = await pack({\n   *  input: fs.createReadStream('pinpie.pdf')\n   * })\n   * const expectedCid = root.toString()\n   * const carReader = await CarReader.fromIterable(out)\n   * const cid = await storage.storeCar(carReader)\n   * console.assert(cid === expectedCid)\n   * ```\n   *\n   * @example\n   * ```\n   * import { packToBlob } from 'ipfs-car/pack/blob'\n   * const data = 'Hello world'\n   * const { root, car } = await packToBlob({ input: [new TextEncoder().encode(data)] })\n   * const expectedCid = root.toString()\n   * const cid = await client.storeCar(car)\n   * console.assert(cid === expectedCid)\n   * ```\n   * @param {Blob|API.CarReader} car\n   * @param {object} [options]\n   * @param {(size: number) => void} [options.onStoredChunk] Callback called\n   * after each chunk of data has been uploaded. By default, data is split into\n   * chunks of around 10MB. It is passed the actual chunk size in bytes.\n   * @param {AnyBlockDecoder[]} [options.decoders] Additional IPLD block\n   * decoders. Used to interpret the data in the CAR file and split it into\n   * multiple chunks. Note these are only required if the CAR file was not\n   * encoded using the default encoders: `dag-pb`, `dag-cbor` and `raw`.\n   */\n  storeCar(car, options) {\n    return NFTStorage.storeCar(this, car, options)\n  }\n  /**\n   * Stores a directory of files and returns a CID for the directory.\n   *\n   * @example\n   * ```js\n   * const cid = await client.storeDirectory([\n   *   new File(['hello world'], 'hello.txt'),\n   *   new File([JSON.stringify({'from': 'incognito'}, null, 2)], 'metadata.json')\n   * ])\n   * cid //>\n   * ```\n   *\n   * Argument can be a [FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList)\n   * instance as well, in which case directory structure will be retained.\n   *\n   * @param {Iterable<File>} files\n   */\n  storeDirectory(files) {\n    return NFTStorage.storeDirectory(this, files)\n  }\n  /**\n   * Returns current status of the stored NFT by its CID. Note the NFT must\n   * have previously been stored by this account.\n   *\n   * @example\n   * ```js\n   * const status = await client.status('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')\n   * ```\n   *\n   * @param {string} cid\n   */\n  status(cid) {\n    return NFTStorage.status(this, cid)\n  }\n  /**\n   * Removes stored content by its CID from the service.\n   *\n   * > Please note that even if content is removed from the service other nodes\n   * that have replicated it might still continue providing it.\n   *\n   * @example\n   * ```js\n   * await client.delete('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')\n   * ```\n   *\n   * @param {string} cid\n   */\n  delete(cid) {\n    return NFTStorage.delete(this, cid)\n  }\n  /**\n   * Check if a CID of an NFT is being stored by nft.storage. Throws if the NFT\n   * was not found.\n   *\n   * @example\n   * ```js\n   * const status = await client.check('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')\n   * ```\n   *\n   * @param {string} cid\n   */\n  check(cid) {\n    return NFTStorage.check(this, cid)\n  }\n  /**\n   * Stores the given token and all resources it references (in the form of a\n   * File or a Blob) along with a metadata JSON as specificed in\n   * [ERC-1155](https://eips.ethereum.org/EIPS/eip-1155#metadata). The\n   * `token.image` must be either a `File` or a `Blob` instance, which will be\n   * stored and the corresponding content address URL will be saved in the\n   * metadata JSON file under `image` field.\n   *\n   * If `token.properties` contains properties with `File` or `Blob` values,\n   * those also get stored and their URLs will be saved in the metadata JSON\n   * file in their place.\n   *\n   * Note: URLs for `File` objects will retain file names e.g. in case of\n   * `new File([bytes], 'cat.png', { type: 'image/png' })` will be transformed\n   * into a URL that looks like `ipfs://bafy...hash/image/cat.png`. For `Blob`\n   * objects, the URL will not have a file name name or mime type, instead it\n   * will be transformed into a URL that looks like\n   * `ipfs://bafy...hash/image/blob`.\n   *\n   * @example\n   * ```js\n   * const metadata = await client.store({\n   *   name: 'nft.storage store test',\n   *   description: 'Test ERC-1155 compatible metadata.',\n   *   image: new File(['<DATA>'], 'pinpie.jpg', { type: 'image/jpg' }),\n   *   properties: {\n   *     custom: 'Custom data can appear here, files are auto uploaded.',\n   *     file: new File(['<DATA>'], 'README.md', { type: 'text/plain' }),\n   *   }\n   * })\n   *\n   * console.log('IPFS URL for the metadata:', metadata.url)\n   * console.log('metadata.json contents:\\n', metadata.data)\n   * console.log('metadata.json with IPFS gateway URLs:\\n', metadata.embed())\n   * ```\n   *\n   * @template {API.TokenInput} T\n   * @param {T} token\n   * @returns {Promise<API.Token<T>>}\n   */\n  store(token) {\n    return NFTStorage.store(this, token)\n  }\n}\n\n/**\n * @param {API.TokenInput} metadata\n */\nconst validateERC1155 = ({ name, description, image, decimals }) => {\n  // Just validate that expected fields are present\n  if (typeof name !== 'string') {\n    throw new TypeError(\n      'string property `name` identifying the asset is required'\n    )\n  }\n  if (typeof description !== 'string') {\n    throw new TypeError(\n      'string property `description` describing asset is required'\n    )\n  }\n  if (!(image instanceof Blob)) {\n    throw new TypeError('property `image` must be a Blob or File object')\n  } else if (!image.type.startsWith('image/')) {\n    console.warn(`According to ERC721 Metadata JSON Schema 'image' must have 'image/*' mime type.\n\nFor better interoperability we would highly recommend storing content with different mime type under 'properties' namespace e.g. \\`properties: { video: file }\\` and using 'image' field for storing a preview image for it instead.\n\nFor more context please see ERC-721 specification https://eips.ethereum.org/EIPS/eip-721`)\n  }\n\n  if (typeof decimals !== 'undefined' && typeof decimals !== 'number') {\n    throw new TypeError('property `decimals` must be an integer value')\n  }\n}\n\n/**\n * @param {API.Deal[]} deals\n * @returns {API.Deal[]}\n */\nconst decodeDeals = (deals) =>\n  deals.map((deal) => {\n    const { dealActivation, dealExpiration, lastChanged } = {\n      dealExpiration: null,\n      dealActivation: null,\n      ...deal,\n    }\n\n    return {\n      ...deal,\n      lastChanged: new Date(lastChanged),\n      ...(dealActivation && { dealActivation: new Date(dealActivation) }),\n      ...(dealExpiration && { dealExpiration: new Date(dealExpiration) }),\n    }\n  })\n\n/**\n * @param {API.Pin} pin\n * @returns {API.Pin}\n */\nconst decodePin = (pin) => ({ ...pin, created: new Date(pin.created) })\n\nconst TokenModel = Token.Token\nexport { TokenModel as Token }\nexport { NFTStorage, File, Blob, FormData, toGatewayURL }\n\n/**\n * Just to verify API compatibility.\n * @type {API.API}\n */\nconst api = NFTStorage\nvoid api\n"]},"metadata":{},"sourceType":"module"}