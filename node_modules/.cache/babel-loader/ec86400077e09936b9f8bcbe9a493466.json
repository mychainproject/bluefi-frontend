{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { injected } from '../connectors';\nexport function useInactiveListener() {\n  _s();\n\n  let suppress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  const {\n    active,\n    error,\n    activate\n  } = useWeb3React();\n  useEffect(() => {\n    if (suppress) {\n      return () => {};\n    }\n\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum && ethereum.on && !active && !error) {\n      const handleChainChanged = chainId => {\n        activate(injected);\n      };\n\n      const handleAccountsChanged = accounts => {\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      };\n\n      const handleNetworkChanged = networkId => {\n        activate(injected);\n      };\n\n      ethereum.on('chainChanged', handleChainChanged);\n      ethereum.on('accountsChanged', handleAccountsChanged);\n      ethereum.on('networkChanged', handleNetworkChanged);\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\n          ethereum.removeListener('networkChanged', handleNetworkChanged);\n        }\n      };\n    }\n\n    return () => {};\n  }, [active, error, suppress, activate]);\n}\n\n_s(useInactiveListener, \"C69EQHl6GEeID8bMvdCGfuvLHLM=\", false, function () {\n  return [useWeb3React];\n});","map":{"version":3,"sources":["/home/hp/Desktop/Bluefi/bluefi-frontend/src/hooks/useInactiveListener.js"],"names":["useEffect","useWeb3React","injected","useInactiveListener","suppress","active","error","activate","ethereum","window","on","handleChainChanged","chainId","handleAccountsChanged","accounts","length","handleNetworkChanged","networkId","removeListener"],"mappings":";;AAAA,SAAQA,SAAR,QAAwB,OAAxB;AACA,SAAQC,YAAR,QAA2B,kBAA3B;AAEA,SAAQC,QAAR,QAAuB,eAAvB;AAEA,OAAO,SAASC,mBAAT,GAA+C;AAAA;;AAAA,MAAlBC,QAAkB,uEAAP,KAAO;AACpD,QAAM;AAACC,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBC,IAAAA;AAAhB,MAA4BN,YAAY,EAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,QAAJ,EAAc;AACZ,aAAO,MAAM,CAAE,CAAf;AACD;;AACD,UAAM;AAACI,MAAAA;AAAD,QAAaC,MAAnB;;AACA,QAAID,QAAQ,IAAIA,QAAQ,CAACE,EAArB,IAA2B,CAACL,MAA5B,IAAsC,CAACC,KAA3C,EAAkD;AAChD,YAAMK,kBAAkB,GAAIC,OAAD,IAAa;AACtCL,QAAAA,QAAQ,CAACL,QAAD,CAAR;AACD,OAFD;;AAIA,YAAMW,qBAAqB,GAAIC,QAAD,IAAc;AAC1C,YAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;AACvBR,UAAAA,QAAQ,CAACL,QAAD,CAAR;AACD;AACF,OAJD;;AAMA,YAAMc,oBAAoB,GAAIC,SAAD,IAAe;AAC1CV,QAAAA,QAAQ,CAACL,QAAD,CAAR;AACD,OAFD;;AAIAM,MAAAA,QAAQ,CAACE,EAAT,CAAY,cAAZ,EAA4BC,kBAA5B;AACAH,MAAAA,QAAQ,CAACE,EAAT,CAAY,iBAAZ,EAA+BG,qBAA/B;AACAL,MAAAA,QAAQ,CAACE,EAAT,CAAY,gBAAZ,EAA8BM,oBAA9B;AAEA,aAAO,MAAM;AACX,YAAIR,QAAQ,CAACU,cAAb,EAA6B;AAC3BV,UAAAA,QAAQ,CAACU,cAAT,CAAwB,cAAxB,EAAwCP,kBAAxC;AACAH,UAAAA,QAAQ,CAACU,cAAT,CAAwB,iBAAxB,EAA2CL,qBAA3C;AACAL,UAAAA,QAAQ,CAACU,cAAT,CAAwB,gBAAxB,EAA0CF,oBAA1C;AACD;AACF,OAND;AAOD;;AAED,WAAO,MAAM,CAAE,CAAf;AACD,GAlCQ,EAkCN,CAACX,MAAD,EAASC,KAAT,EAAgBF,QAAhB,EAA0BG,QAA1B,CAlCM,CAAT;AAmCD;;GAtCeJ,mB;UACoBF,Y","sourcesContent":["import {useEffect} from 'react';\nimport {useWeb3React} from '@web3-react/core';\n\nimport {injected} from '../connectors';\n\nexport function useInactiveListener(suppress = false) {\n  const {active, error, activate} = useWeb3React();\n\n  useEffect(() => {\n    if (suppress) {\n      return () => {};\n    }\n    const {ethereum} = window;\n    if (ethereum && ethereum.on && !active && !error) {\n      const handleChainChanged = (chainId) => {\n        activate(injected);\n      };\n\n      const handleAccountsChanged = (accounts) => {\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      };\n\n      const handleNetworkChanged = (networkId) => {\n        activate(injected);\n      };\n\n      ethereum.on('chainChanged', handleChainChanged);\n      ethereum.on('accountsChanged', handleAccountsChanged);\n      ethereum.on('networkChanged', handleNetworkChanged);\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\n          ethereum.removeListener('networkChanged', handleNetworkChanged);\n        }\n      };\n    }\n\n    return () => {};\n  }, [active, error, suppress, activate]);\n}\n"]},"metadata":{},"sourceType":"module"}