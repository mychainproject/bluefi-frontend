{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { injected } from '../connectors';\nexport function useEagerConnect() {\n  _s();\n\n  const {\n    activate,\n    active\n  } = useWeb3React();\n  const [tried, setTried] = useState(false);\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, [activate, active]); // intentionally only running on mount (make sure it's only mounted once :))\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n  return tried;\n}\n\n_s(useEagerConnect, \"kis58PF6v2HZqrSYQVFelIlZ8vc=\", false, function () {\n  return [useWeb3React];\n});","map":{"version":3,"sources":["/home/hp/Desktop/Bluefi/bleufi-frontend/src/hooks/useEagerConnect.js"],"names":["useState","useEffect","useWeb3React","injected","useEagerConnect","activate","active","tried","setTried","isAuthorized","then","undefined","catch"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAAQC,YAAR,QAA2B,kBAA3B;AAEA,SAAQC,QAAR,QAAuB,eAAvB;AAEA,OAAO,SAASC,eAAT,GAA2B;AAAA;;AAChC,QAAM;AAACC,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAAqBJ,YAAY,EAAvC;AAEA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,KAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,QAAQ,CAACM,YAAT,GAAwBC,IAAxB,CAA8BD,YAAD,IAAkB;AAC7C,UAAIA,YAAJ,EAAkB;AAChBJ,QAAAA,QAAQ,CAACF,QAAD,EAAWQ,SAAX,EAAsB,IAAtB,CAAR,CAAoCC,KAApC,CAA0C,MAAM;AAC9CJ,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,SAFD;AAGD,OAJD,MAIO;AACLA,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,KARD;AASD,GAVQ,EAUN,CAACH,QAAD,EAAWC,MAAX,CAVM,CAAT,CAJgC,CAcR;AAExB;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACM,KAAD,IAAUD,MAAd,EAAsB;AACpBE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,GAJQ,EAIN,CAACD,KAAD,EAAQD,MAAR,CAJM,CAAT;AAMA,SAAOC,KAAP;AACD;;GAxBeH,e;UACaF,Y","sourcesContent":["import {useState, useEffect} from 'react';\nimport {useWeb3React} from '@web3-react/core';\n\nimport {injected} from '../connectors';\n\nexport function useEagerConnect() {\n  const {activate, active} = useWeb3React();\n\n  const [tried, setTried] = useState(false);\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, [activate, active]); // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n\n  return tried;\n}\n"]},"metadata":{},"sourceType":"module"}